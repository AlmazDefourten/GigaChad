@page "/"

<h1>Index</h1>

@*<AuthorizeView>
        <Authorized>
            <a href="Identity/Account/Manage">Hello, @Login!</a>
            <form method="post" action="Identity/Account/LogOut">
                <button type="submit" class="nav-link btn btn-link">Log out</button>
            </form>
        </Authorized>
        <NotAuthorized>
            <a href="Identity/Register">Register</a>
            <a href="/login">Log in</a>
        </NotAuthorized>
 </AuthorizeView>*@

<a href="Identity/Account/Manage">Hello, @Login!</a>
<form method="post" action="Identity/Account/LogOut">
    @*<button type="submit" class="nav-link btn btn-link">Log out</button>*@
</form>
<a href="/register">Register</a>
<a href="/login">Log in</a>


<div style="display:flex">
    <div>
        <div style="display:flex">
            <input class="btn btn-primary" color="" type="button" value="Input">
            <div class="dropdown">
              <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                 проект
              </button>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item" href="#">Action</a>
                <a class="dropdown-item" href="#">Another action</a>
                <a class="dropdown-item" href="#">Something else here</a>
              </div>
            </div>
            <input class="btn btn-primary" type="button" value="+">
        </div>
        <TaskRendering/>
    </div>
    <div>
        <Scheduler></Scheduler>
    </div>
</div>



@code{
    [CascadingParameter] public Task<AuthenticationState> AuthTask { get; set; }

    [Inject] private CustomAuthStateProvider AuthState { get; set; }
    private System.Security.Claims.ClaimsPrincipal user;

    private string Login;
    private List<BlazorChadCalendar.Data.Task> Tasks = new List<BlazorChadCalendar.Data.Task>();



    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            var authState = await AuthState.GetAuthenticationStateAsync();
            Login = authState.User.Identity.Name;

            if (authState.User.Identity.IsAuthenticated == true)
                using (ApplicationContext db = new ApplicationContext())
                    Tasks.AddRange(db.Tasks.Where(t => t.User.Login == Login).ToList<BlazorChadCalendar.Data.Task>());

            StateHasChanged();
        }

    }
}


