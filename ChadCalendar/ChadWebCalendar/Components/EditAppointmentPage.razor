@using ChadWebCalendar.Data.Services
@inject EventService eventService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject DialogService DialogService
@attribute [Authorize]
@using ChadWebCalendar.Data
@using ChadWebCalendar.Components
@inject NavigationManager NavigationManager
@using AntDesign;


<RadzenTemplateForm TItem="Appointment" Data="@model">
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Название" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Text" Name="Название" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Описание" />
        </div>
        <div class="col">
            <RadzenTextArea @bind-Value="@model.Description" Name="Description" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Частота" />
        </div>
        <div class="col">
            <div class="form-group">
                <label></label>
                <select @bind="model.Frequency">
                    <option><RadzenLabel Text="Никогда" /></option>
                    <option><RadzenLabel Text="Каждый день" /></option>
                    <option><RadzenLabel Text="Каждую неделю" /></option>
                    <option><RadzenLabel Text="Каждый месяц" /></option>
                </select>
            </div>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Начало" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Конец" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Напомнить за" />
        </div>
        <div class="col">
            <div class="form-group">
                <label>Напомнить за</label>
                <input class="form-control" type="number" @bind="model.RemindNMinutesBefore" min="0">
                <label>минут</label>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <button @onclick="editEvent" class="btn btn-danger">Изменить</button>
            <button @onclick="deleteEvent" class="btn btn-danger">Удалить</button>
            <button @onclick="migration" class="btn btn-danger">
                <Dropdown Placement="@Placement.BottomCenter">
                    <Overlay>
                        <Menu>
                            <MenuItem @key="0">
                                <button type="button" class="btn btn-primary" >Выйти</button>
                            </MenuItem>
                            <MenuItem @key="1">
                                <a type="button" href="/settings" class="btn btn-primary">Настройки</a>
                            </MenuItem>
                        </Menu>
                    </Overlay>
                    <ChildContent>
                        <Button class="btn-lg">@authenticationState.Result.User.Identity.Name <Icon Type="user" /></Button>
                    </ChildContent>
                </Dropdown>
            </button>
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public Appointment Appointment { get; set; }
    Appointment model = new Appointment();
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    string userName;
    Data.Event _event;


    protected override void OnParametersSet()
    {
        model = Appointment;
    }

    private Data.Event getEvent()
    {
        userName = authenticationState.Result.User.Identity.Name;
        return _event = eventService.GetEventById(Appointment.Id);
    }

    /*
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        userName = authenticationState.Result.User.Identity.Name;
        _event = eventService.GetEventById(Appointment.Id);
    }
    */

    void editEvent()
    {
        _event = getEvent();
        _event.Name = model.Text + "";
        _event.Description = model.Description + "";
        _event.Frequency = model.Frequency;
        _event.StartsAt = model.Start;
        _event.FinishesAt = model.End;
        _event.Id = model.Id;
        _event.RemindNMinutesBefore = model.RemindNMinutesBefore;

        if (eventService.Edit(_event.Id, userName))
        {
            DialogService.Close(model);
        }
    }

    void deleteEvent()
    {
        _event = getEvent();
        eventService.Delete(_event.Id);
        DialogService.Close(model);
        NavigationManager.NavigateTo("/", true);
    }
    void migration()
    {
        _event = getEvent();
        eventService.Mutatuion(_event, null, userName);
        DialogService.Close(model);
        NavigationManager.NavigateTo("/", true);
    }
}