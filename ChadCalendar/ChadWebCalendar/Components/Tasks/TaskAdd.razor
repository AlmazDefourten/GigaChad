@using ChadWebCalendar.Data.Services
@inject TaskService taskService
@inject NavigationManager NavigationManager
@attribute [Authorize]
<EditForm Model="@taskValidation">
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="Name">Название задачи</label>
        <InputText type="text" placeholder="" class="form-control" @bind-Value=task.Name id="Name" style="width: 250px" />
    </div>
        <div class="form-group">
            <label>Время на задачу</label>
            <input type="text" @bind="tempDT" min="0" style="width: 70px">
        </div>
        <div class="form-group">
            <label>Описание</label>
            <textarea class="form-control" type="text" placeholder="" @bind="task.Description" style="width: 250px"></textarea>
        </div>
        <div class="form-group">
            <label>Дедлайн</label>
            <input class="form-control" type="datetime-local" @bind="task.Deadline" @bind:format="yyyy-MM-ddTHH:mm" style="width: 250px"/>
        </div>
        <div class="form-group">
            <label>Выберите проект для задачи</label>
            @if (userProjects != null)
            {
                <select @bind="projectId">
                    @foreach (var proj in userProjects)
                    {
                        <option value="@proj.Id">@proj.Name</option>
                    }
                </select>
            }
        </div>
        <div class="form-group">
            <input type="checkbox" @bind="task.AllowedToDistribute"><label>Задачу можно автоматически распределить</label><br>
        </div>
        <div class="form-group">
            <label> После какой задачи расположить</label>
            <select @bind="predecessorIdstr">
                <option value="После любой">После любой</option>
                @if (userTasks != null)
                {
                    foreach (var task in userTasks)
                    {
                        <option value="@task.Id.ToString()"> @task.Name </option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label>Максимум в день</label>
            <input class="form-control" type="number" placeholder="" @bind="task.MaxPerDay" min="0" style="width: 70px">
        </div>
        <div class="form-group">
            <label>Частота</label>
            <select @bind="task.Frequency">
                <option disabled>Частота</option>
                <option>Никогда</option>
                <option>Каждый день</option>
                <option>Каждую неделю</option>
                <option>Каждый месяц</option>
            </select>
        </div>

        <div class="form-group">
            @if (isValidationError)
            {
                <label>Проверьте правильность заполнения полей</label>
            }
        </div>
        <button @onclick="addTask" type="submit" class="btn btn-primary">Готово</button>
</EditForm>



    @code {
        [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
        string predecessorIdstr = "После любой";
        int? projectId = 0;
        Data.TaskValidation taskValidation = new Data.TaskValidation();
        Data.Task task = new Data.Task();
        Data.User user;
        Data.Project firstProject;
        TimeSpan? tempDT;
        IEnumerable<Data.Project> userProjects;
        IEnumerable<Data.Task> userTasks;
        bool isValidationError = false;
        protected override async System.Threading.Tasks.Task OnInitializedAsync()
        {
            tempDT = TimeSpan.Parse("00:00:00"); // инициализация для здравого показа
            DateTime dt = DateTime.Now;
            task.Deadline = dt.Date.AddHours(dt.Hour).AddMinutes(dt.Minute);
            user = taskService.GetUser(authenticationState.Result.User.Identity.Name);
            userTasks = taskService.GetTasks(user);
            userProjects = taskService.GetProjects(user);
            firstProject = taskService.GetFirstProject();
            projectId = firstProject.Id;

            taskValidation.TimeTakes = task.TimeTakes;
        }
        void addTask()
        {
            if (tempDT != null)
            {
                task.TimeTakes = tempDT;
                taskValidation.TimeTakes = task.TimeTakes;
            }
            if (predecessorIdstr != "После любой")
                task.Predecessor = taskService.GetPredecessor(Convert.ToInt32(predecessorIdstr));
            if (taskService.AddTask(task, projectId, user))
            {
                task = new Data.Task();
                OnInitializedAsync();
                NavigationManager.NavigateTo("/");
            }
        }
    }
