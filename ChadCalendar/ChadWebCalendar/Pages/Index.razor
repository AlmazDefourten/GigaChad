@page "/"
<head>
    <title>showme</title>
</head>

@using ChadWebCalendar.Components.Events
@using ChadWebCalendar.Components.Tasks
@using ChadWebCalendar.Components
@using ChadWebCalendar.Components.Projects
@using ChadWebCalendar
@using ChadWebCalendar.Pages
@using ChadWebCalendar.Data.Models
@using ChadWebCalendar.Data.Services
@using AntDesign;
@using ChadWebCalendar.Data
@using ButtonType = AntDesign.ButtonType
@inject IAccountService _accountService
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject ProjectService projectService
@implements IDisposable
<div>
    <AuthorizeView>
        <Authorized>
            <div class="navmenu">
                <NavigationMenu></NavigationMenu>
            </div>
            <div class="main_container">
                <div class="projectlist">
                    <ProjectList GetProject="GetProjectId" />
                </div>
                <div class="tasklist">
                    <div Style="display: flex; justify-content: space-between;">
                        <Button Type="@ButtonType.Default" OnClick="Distribute">👩‍💼</Button>
                        <Button OnClick="@(() => EditProjectPage(projId))" Style="width:100%; overflow-wrap: break-word">
                            @projName
                        </Button>
                        <Button OnClick="CreateTaskPage">
                            +
                        </Button>
                    </div>
                    <TaskList projectId="@projId" />
                </div>
                <div class="scheduler">
                    <Scheduler></Scheduler>
                </div>
            </div>
            <div>
            </div>
        </Authorized>
        <NotAuthorized>
            <LogIn />
        </NotAuthorized>
    </AuthorizeView>
</div>


@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private List<ChadWebCalendar.Data.Task> Tasks = new List<ChadWebCalendar.Data.Task>();
    private IList<Claim> userClaim = new List<Claim>();
    string _title;
    NotificationsWorker notificationWorker = new NotificationsWorker();
    private LoginModel model = new LoginModel();
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        _title = DateTime.Now.ToString();
        if (!notificationWorker.IsStarted && authenticationState.Result.User.Identity.Name != null)
        {
            NotificationsWorker.Username = authenticationState.Result.User.Identity.Name;
            notificationWorker.Start();
            notificationWorker.NotificationReadyToShow += showNotification;
            notificationWorker.IsStarted = true;
        }
        if (authenticationState.Result.User.Identity.Name != null)
        {
            using (ApplicationContext db = new ApplicationContext()) // для получения первого проекта
            {
                User user = db.Users.FirstOrDefault(u => u.Login == authenticationState.Result.User.Identity.Name);
                projId = projectService.GetProjects(user).FirstOrDefault()?.Id;
                projName = projectService.GetProjects(user).FirstOrDefault()?.Name;
            }
        }
    }
    public void Dispose()
    {
        notificationWorker.Stop();
    }
    private void Distribute()
    {

        TaskDistributor.Distribute((int)projId,DistributionType.Evenly);
        NavigationManager.NavigateTo("/", true);
    }

    private void showNotification()
    {
        foreach (var item in notificationWorker.TypesOfNotification)
            toastService.ShowInfo($"{item}");
        JSRuntime.InvokeVoidAsync("setTitle", "You have notification");
    }

    private async void CreateTaskPage()
    {
        await DialogService.OpenAsync<TaskAdd>("Добавить задачу");
        //notificationWorker.Stop();
        //await _accountService.LogoutAsync();
    }

    private async void EditProjectPage(int? projectId)
    {
        await DialogService.OpenAsync<ProjectEdit>("Редактировать проект",
            new Dictionary<string, object> { { "projectId", projectId } });
        //notificationWorker.Stop();
        // await _accountService.LogoutAsync();
    }

    private async void Logout()
    {
        notificationWorker.Stop();
        await _accountService.LogoutAsync();
    }
    private void GetProjectId(Project pr)
    {
        projId = pr.Id;
        projName = pr.Name;
    }
    bool visibleEvent = false;
    bool visibleProject = false;
    bool visibleEditProject = false;
    public int? projId;
    public string? projName;
}
